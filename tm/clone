#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
OpenNebula Driver for Linstor
Copyright 2018 LINBIT USA LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

from __future__ import print_function

import os
import sys

from one.extender import clone, CloneMode, get_device_path, resize_disk
from linstor import Resource, SizeCalc
from one import util
from one.datastore import Datastore
from one.vm import Vm

SRC = sys.argv[1]
DST = sys.argv[2]
VM_ID = sys.argv[3]
DS_ID = sys.argv[4]


def main():
    util.log_info("Entering tm clone src:{s} dst:{d}".format(s=SRC, d=DST))

    src_path = util.arg_path(SRC).strip()
    dst_host = util.arg_host(DST).strip()
    dst_path = util.arg_path(DST).strip()
    dst_dir = os.path.dirname(dst_path).strip()
    disk_id = dst_path.split(".")[-1].strip()

    datastore = Datastore(util.show_ds(DS_ID))
    vm = Vm(util.show_vm(VM_ID))

    res = Resource(name=src_path, uri=datastore.linstor_controllers)
    clone_name = "{}-vm{}-disk{}".format(res.name, VM_ID, disk_id)
    clone(
        res,
        clone_name,
        datastore.deployment_nodes,
        datastore.auto_place,
        datastore.linstor_resource_group,
        CloneMode.from_str(datastore.linstor_clone_mode),
        prefer_node=dst_host
    )
    res_clone = Resource(clone_name, uri=datastore.linstor_controllers)

    if vm.disk_size(disk_id) > SizeCalc.convert(res.volumes[0].size, SizeCalc.UNIT_B, SizeCalc.UNIT_MiB):
        resize_disk(res_clone, vm, disk_id, vm.disk_size(disk_id))

    res_clone.activate(dst_host)

    util.link_file(dst_host, dst_dir, dst_path, get_device_path(res_clone), res_clone.name)

    util.log_info("Exiting tm clone")


if __name__ == "__main__":
    main()
