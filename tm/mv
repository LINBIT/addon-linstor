#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
OpenNebula Driver for Linstor
Copyright 2018 LINBIT USA LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

from __future__ import print_function

import os
import sys
import traceback

from linstor import Resource
from one import util, vm, consts
from one.datastore import Datastore
from linstor_helper import get_rsc_name

SRC = sys.argv[1]
DST = sys.argv[2]
VM_ID = sys.argv[3]
DS_ID = sys.argv[4]


def main():
    util.log_info("Entering tm mv, from='{s}' to='{dst}'".format(s=SRC, dst=DST))

    if SRC == DST:
        util.log_info(
            "source ({}) and destination ({}) are the same, exiting.".format(SRC, DST)
        )
        sys.exit(0)

    src_host = util.arg_host(SRC).strip()
    src_path = util.arg_path(SRC).strip()
    src_dir = os.path.dirname(src_path)

    dst_host = util.arg_host(DST).strip()
    dst_path = util.arg_path(DST).strip()
    dst_dir = os.path.dirname(dst_path).strip()

    datastore = Datastore(util.show_ds(DS_ID))

    target_vm = vm.Vm(util.show_vm(VM_ID))

    disk_ID = SRC.split(".")[-1].strip() if "disk." in SRC else None

    if disk_ID is None:
        if target_vm.has_context:
            # context image
            disk_ID = target_vm.context_ID
            res_name = "{}-vm{}-disk{}".format(consts.CONTEXT_PREFIX, VM_ID, disk_ID)

            res = Resource(name=res_name, uri=datastore.linstor_controllers)
            util.log_info("Active context resource '{r}' on destination host: {h}".format(r=res_name, h=dst_host))
            res.activate(dst_host)
            util.log_info("Deactivate context resource '{r}' on source host: {h}".format(r=res_name, h=src_host))
            res.deactivate(src_host)
        else:
            util.log_info("No CONTEXT section in VM({vm}) XML info".format(vm=VM_ID))

        # Remove current destination directory, as ssh mv does
        util.ssh_exec_and_log(
            " ".join(
                [
                    '"{}"'.format(dst_host),
                    '"rm -Rf {}"'.format(dst_path)
                ]
            )
        )

        util.ssh_make_path(" ".join([dst_host, dst_dir]))

        tar_copy_cmd = " && ".join([
            "set -e -o pipefail",
            "tar -C {src_dir} --sparse -cf - {src_vm_dir} | ssh {dst_host} 'tar -C {dst_dir} --sparse -xf -'"
            .format(
                src_dir=src_dir,
                src_vm_dir=os.path.basename(src_path),
                dst_host=dst_host,
                dst_dir=dst_dir
            ),
            "rm -Rf {src_path}".format(src_path=src_path)
        ])

        util.ssh_exec_and_log(
            " ".join([
                '"{}"'.format(src_host),
                '"{}"'.format(tar_copy_cmd),
                '"Unable to tar copy to new host"'
                ]
            )
        )
    else:
        # normal drbd image
        res_name = get_rsc_name(target_vm, disk_ID)

        res = Resource(name=res_name, uri=datastore.linstor_controllers)
        util.log_info("Active resource '{r}' on destination host: {h}".format(r=res_name, h=dst_host))
        res.activate(dst_host)
        util.log_info("Deactivate resource '{r}' on source host: {h}".format(r=res_name, h=src_host))
        res.deactivate(src_host)

    # do not remove links on the old host, as the system driver will just tar the old vm directory
    # and copy it to the new host

    util.log_info("Exiting tm mv")


if __name__ == "__main__":
    try:
        main()
    except Exception as err:
        util.error_message(traceback.format_exc())
        print("ERROR: " + str(err))
        raise
