#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
OpenNebula Driver for Linstor
Copyright 2018 LINBIT USA LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""


import base64
import sys
import traceback

from linstor_helper import resource
from one import util, vm, consts
from one.datastore import Datastore

SRC_HOST = sys.argv[1]
DST_HOST = sys.argv[2]
DST_PATH = sys.argv[3]
VM_ID = sys.argv[4]
DS_ID = sys.argv[5]
TEMPLATE = sys.argv[6]


def main():
    util.log_info("Entering tm/premigrate from {s} to {t} in {tp}".format(s=SRC_HOST, t=DST_HOST, tp=DST_PATH))

    target_vm = vm.Vm(base64.b64decode(TEMPLATE))
    dst_host = util.arg_host(DST_HOST).strip()
    src_host = util.arg_host(SRC_HOST).strip()
    dst_dir = util.arg_path(DST_PATH).strip()

    datastore = Datastore(util.show_ds(DS_ID))

    for disk in target_vm.disk_IDs:
        res_name = target_vm.disk_source(disk)
        if target_vm.disk_is_clone(disk) == "YES":
            res_name = "{}-vm{}-disk{}".format(res_name, VM_ID, disk)
        res = resource.Resource(name=res_name)
        res.assign(DST_HOST)
        res.enable_dual_primary()
        dst_path = "{}/disk.{}".format(dst_dir, disk)

        link_command = " ; ".join(
            [
                "set -e",
                "mkdir -p {}".format(dst_dir),
                "ln -fs {} {}".format(res.path, dst_path),
            ]
        )

        util.ssh_exec_and_log(
            " ".join(
                [
                    '"{}"'.format(dst_host),
                    '"{}"'.format(link_command),
                    '"Error: Unable to link {} to {} on {}"'.format(
                        res.name, dst_path, dst_host
                    ),
                ]
            )
        )

    args = ""
    for arg in sys.argv[1:]:
        args += ' "{}" '.format(arg)

    util.migrate_other(args)

    context_id = target_vm.context_ID
    context_path = "{}/disk.{}".format(dst_dir, context_id)
    if datastore.tm_mad != "linstor":
        # [phil] I guess this does not belong here, but I want working live
        # migration with ssh system store.
        # scp'ing context block device from the source to the destination machine
        scp_command = " ".join(
            [
                "if test ! -e {}; then".format(context_path),
                "scp {}:{} {};".format(src_host, context_path, context_path),
                "fi",
            ]
        )
        util.ssh_exec_and_log(
            " ".join(
                [
                    '"{}"'.format(dst_host),
                    '"{}"'.format(scp_command),
                    '"Error: Unable to scp {} from {} to {}"'.format(
                        context_path, src_host, dst_host
                    ),
                ]
            )
        )
    else:
        res_name = "{}-vm{}-disk{}".format(consts.CONTEXT_PREFIX, VM_ID, context_id)
        res = resource.Resource(name=res_name)
        res.assign(DST_HOST)
        res.enable_dual_primary()

        link_command = " ; ".join(
            [
                "set -e",
                "mkdir -p {}".format(dst_dir),
                "ln -fs {} {}".format(res.path, context_path),
            ]
        )

        util.ssh_exec_and_log(
            " ".join(
                [
                    '"{}"'.format(dst_host),
                    '"{}"'.format(link_command),
                    '"Error: Unable to link {} to {} on {}"'.format(
                        res.name, context_path, dst_host
                    ),
                ]
            )
        )

    util.log_info("Exiting tm/premigrate")


if __name__ == "__main__":
    try:
        main()
    except Exception as err:
        util.error_message(traceback.format_exc())
        print("ERROR: " + str(err))
        raise
