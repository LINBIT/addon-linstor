#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
OpenNebula Driver for Linstor
Copyright 2018 LINBIT USA LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""


import base64
import sys
import traceback

from linstor import Resource
from one import util, vm, consts
from one.datastore import Datastore
from linstor_helper import get_rsc_name

SRC_HOST = sys.argv[1]
DST_HOST = sys.argv[2]
DST_PATH = sys.argv[3]
VM_ID = sys.argv[4]
DS_ID = sys.argv[5]
TEMPLATE = sys.argv[6]


def main():
    util.log_info("Entering tm/postmigrate, from='{f}' to='{t}'".format(f=SRC_HOST, t=DST_HOST))

    target_vm = vm.Vm(base64.b64decode(TEMPLATE))
    src_host = util.arg_host(SRC_HOST).strip()
    dst_dir = util.arg_path(DST_PATH).strip()

    datastore = Datastore(util.show_ds(DS_ID))

    for disk in target_vm.disk_IDs:
        if target_vm.tm_mad(disk) == "linstor":
            res_name = get_rsc_name(target_vm, disk)
            res = Resource(name=res_name, uri=datastore.linstor_controllers)

            res.deactivate(src_host)
            res.allow_two_primaries = False

    if datastore.tm_mad == "linstor":
        # deactivate context image too
        context_id = target_vm.context_ID
        res_name = "{}-vm{}-disk{}".format(consts.CONTEXT_PREFIX, VM_ID, context_id)
        res = Resource(name=res_name, uri=datastore.linstor_controllers)
        res.deactivate(src_host)
        res.allow_two_primaries = False

    args = ""
    for arg in sys.argv[1:]:
        args += ' "{}" '.format(arg)

    util.migrate_other(args)

    # always remove old vm entries from src host
    unlink_command = " ".join(["set -e;", "rm -rf {};".format(dst_dir)])
    util.ssh_exec_and_log(
        " ".join(
            [
                '"{}"'.format(src_host),
                '"{}"'.format(unlink_command),
                '"{}"'.format(
                    "Error: Unable to remove directory {} on {}".format(
                        dst_dir, src_host
                    )
                ),
            ]
        )
    )

    util.log_info("Exiting tm/postmigrate")


if __name__ == "__main__":
    try:
        main()
    except Exception as err:
        util.error_message(traceback.format_exc())
        print("ERROR: " + str(err))
        raise
