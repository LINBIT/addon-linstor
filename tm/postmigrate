#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
OpenNebula Driver for Linstor
Copyright 2018 LINBIT USA LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""


import base64
import sys
import traceback
import io

from linstor import Resource
from one import util, vm
from one.datastore import Datastore
from one.image import Image
from one.extender import get_rsc_name, get_current_context

SRC_HOST = sys.argv[1]
DST_HOST = sys.argv[2]
DST_PATH = sys.argv[3]
VM_ID = sys.argv[4]
DS_ID = sys.argv[5]


def main():
    util.log_info("Entering tm/postmigrate, from='{f}' to='{t}'".format(f=SRC_HOST, t=DST_HOST))

    try:
        TEMPLATE = sys.argv[6]
        vmxml = base64.b64decode(TEMPLATE)
    except (base64.binascii.Error, IndexError):
        # since opennebula 5.10 the template XML should be provided via STDIN
        outstr = io.BytesIO()
        base64.decode(sys.stdin, outstr)
        vmxml = outstr.getvalue().decode()

    target_vm = vm.Vm(vmxml)
    src_host = util.arg_host(SRC_HOST).strip()
    dst_dir = util.arg_path(DST_PATH).strip()

    for disk in target_vm.disk_IDs:
        if target_vm.tm_mad(disk) == "linstor":
            image = Image(util.show_image(target_vm.disk_image_ID(disk)))
            image_datastore = Datastore(util.show_ds(image.datastore_ID))
            res_name = get_rsc_name(target_vm, disk)
            res = Resource(name=res_name, uri=image_datastore.linstor_controllers)

            res.deactivate(src_host)
            res.allow_two_primaries = False

    datastore = Datastore(util.show_ds(DS_ID))
    if datastore.tm_mad == "linstor":
        if target_vm.has_context:
            # deactivate context image too
            context_id = target_vm.context_ID
            res_name = get_current_context(datastore.linstor_controllers, VM_ID, context_id)
            res = Resource(name=res_name, uri=datastore.linstor_controllers)
            res.deactivate(src_host)
            res.allow_two_primaries = False
        else:
            util.log_info("No CONTEXT section in VM({vm}) XML info".format(vm=VM_ID))

    args = ""
    for arg in sys.argv[1:]:
        args += ' "{}" '.format(arg)

    util.migrate_other(args)

    # always remove old vm entries from src host
    util.unlink_file(src_host, dst_dir)

    util.log_info("Exiting tm/postmigrate")


if __name__ == "__main__":
    try:
        main()
    except Exception as err:
        util.error_message(traceback.format_exc())
        print("ERROR: " + str(err))
        raise
