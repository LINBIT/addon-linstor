#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
OpenNebula Driver for Linstor
Copyright 2018 LINBIT USA LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

from __future__ import print_function

import sys
import traceback

from one import util, vm, consts
from one.datastore import Datastore
from linstor_helper import delete, get_rsc_name
from linstor import Resource, LinstorError

DST = sys.argv[1]
VM_ID = sys.argv[2]
DS_ID = sys.argv[3]


def main():
    util.log_info("Entering tm delete, dst='{dst}'".format(dst=DST))

    datastore = Datastore(util.show_ds(DS_ID))

    dst_host = util.arg_host(DST).strip()
    dst_path = util.arg_path(DST).strip()

    path_split = dst_path.split(".")
    disk_id = None
    if len(path_split) > 1:
        disk_id = dst_path.split(".")[-1].strip()

    unlink_command = " ; ".join(["set -e", """if [ -d "{dst}" ]; then
            rm -rf "{dst}"
        else
            rm -f {dst}
        fi""".format(dst=dst_path)])

    util.ssh_exec_and_log(
        " ".join(
            [
                '"{}"'.format(dst_host),
                '"{}"'.format(unlink_command),
                '"{}"'.format(
                    "Error: Unable to remove symbolic link {} on {}".format(
                        dst_path, dst_host
                    )
                ),
            ]
        )
    )

    target_vm = vm.Vm(util.show_vm(VM_ID))

    # disk_id is None if the vm folder is deleted, usually the last action of a VM delete

    if disk_id is not None:
        res_name = get_rsc_name(target_vm, disk_id)

        res = Resource(name=res_name, uri=datastore.linstor_controllers)
        res.deactivate(dst_host)

        if not (
            target_vm.disk_persistent(disk_id) or target_vm.disk_type(disk_id) == "CDROM"
        ):
            try:
                delete(res_name, datastore.linstor_controllers)
            except LinstorError as le:
                util.log_info(str(le))
    else:
        if target_vm.has_context:
            res_name = "{pre}-vm{vm_id}-disk{disk_id}".format(
                pre=consts.CONTEXT_PREFIX,
                vm_id=VM_ID,
                disk_id=target_vm.context_ID
            )

            try:
                delete(res_name, datastore.linstor_controllers)
            except LinstorError as le:
                util.log_info(str(le))
        else:
            util.log_info("No CONTEXT section in VM({vm}) XML info".format(vm=VM_ID))

    util.log_info("Exiting tm delete")


if __name__ == "__main__":
    try:
        main()
    except Exception as err:
        util.error_message(traceback.format_exc())
        print("ERROR: " + str(err))
        raise
