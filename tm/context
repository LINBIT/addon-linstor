#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
OpenNebula Driver for Linstor
Copyright 2018 LINBIT USA LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

from __future__ import print_function

import sys
import os
import traceback
import shutil
import subprocess
from one import util, consts
from one.datastore import Datastore
from linstor_helper import get_device_path, delete_vm_contexts, get_current_context_id
from linstor import LinstorError, Resource, Volume

FILES = sys.argv[1:-3]
DST = sys.argv[-3]
VM_ID = sys.argv[-2]
DS_ID = sys.argv[-1]


def ensure_dir(directory):
    try:
        os.mkdir(directory)
    except OSError:
        pass


def main():
    disk_id = DST.split(".")[-1].strip()

    dst_host = util.arg_host(DST).strip()
    dst_path = util.arg_path(DST).strip()
    dst_dir = os.path.dirname(dst_path).strip()

    datastore = Datastore(util.show_ds(DS_ID))

    util.log_info("Entering context on {h} for files {f}.".format(h=DST, f=FILES))

    iso_dir = os.path.join(datastore.base_path, ".isofiles", str(VM_ID))

    ensure_dir(datastore.base_path)
    ensure_dir(os.path.join(datastore.base_path, ".isofiles"))
    ensure_dir(iso_dir)

    iso_file = os.path.join(iso_dir, str(VM_ID) + ".iso")

    for file in FILES:
        util.log_info("copy {s} {d}".format(s=file, d=os.path.join(iso_dir, os.path.basename(file))))
        if file.startswith("http"):
            subprocess.check_call(["wget", "-P", iso_dir, file])
        elif os.path.isdir(file):
            shutil.copytree(file, os.path.join(iso_dir, os.path.basename(file)))
        else:
            shutil.copy2(file, os.path.join(iso_dir, os.path.basename(file)))

    rc = util.mkiso_command(
        '-o {iso_file} -V CONTEXT -J -R {iso_dir}'.format(
                            iso_file=iso_file, iso_dir=iso_dir)
    )

    if rc == 0:
        iso_size = os.path.getsize(iso_file)
        iso_size_mb = int(iso_size / 1024 / 1024) + 1

        del_result = delete_vm_contexts(datastore.linstor_controllers, VM_ID, disk_id)
        for res in del_result:
            if del_result[res] is not None:
                util.log_info(str(del_result[res]))

        c_id = get_current_context_id(datastore.linstor_controllers, VM_ID, disk_id)
        c_id = 1 if c_id is None else c_id + 1
        res_name = consts.CONTEXT_PREFIX + "-vm{vm_id}-disk{disk_id}-{cid}".format(
            vm_id=VM_ID, disk_id=disk_id, cid=c_id
        )
        resource = Resource(res_name, datastore.linstor_controllers)
        resource.placement.storage_pool = datastore.storage_pool
        resource.volumes[0] = Volume('{s}MiB'.format(s=iso_size_mb))

        if datastore.auto_place:
            resource.placement.redundancy = int(datastore.auto_place)
            resource.autoplace()
        else:
            for n in datastore.deployment_nodes:
                resource.diskful(n)

        resource.activate(dst_host)

        if util.exec_and_log(
            'cat {iso} | ssh {n} dd of={dev_path} status=none'.format(
                iso=iso_file, n=dst_host, dev_path=get_device_path(resource)),
            "Error copying iso to drbd"
        ) != 0:
            raise RuntimeError("ERROR: Error copying iso to drbd device {dev_path} on node {n}".format(
                dev_path=get_device_path(resource), n=dst_host))

        # link drbd device
        link_command = " ; ".join(
            [
                "set -e",
                "mkdir -p {}".format(dst_dir),
                "ln -fs {} {}".format(get_device_path(resource), dst_path),
            ]
        )

        util.ssh_exec_and_log(
            " ".join(
                [
                    '"{}"'.format(dst_host),
                    '"{}"'.format(link_command),
                    '"Error: Unable to link {} to {} on {}"'.format(
                        res_name, dst_path, dst_host
                    ),
                ]
            )
        )

    shutil.rmtree(iso_dir, ignore_errors=True)

    util.log_info("Leaving context successfully.")


if __name__ == "__main__":
    try:
        main()
    except Exception as err:
        util.error_message(traceback.format_exc())
        print("ERROR: " + str(err))
        raise
