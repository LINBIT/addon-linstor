#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
OpenNebula Driver for Linstor
Copyright 2018 LINBIT USA LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

from __future__ import print_function

import base64
import sys

from one.extender import clone, CloneMode
from linstor import Resource
from one import consts, driver_action, util
from one.image import Image

DRIVER_ACTION = sys.argv[1]
IMAGE_ID = sys.argv[2]


def main():
    util.log_info("Entering datastore clone")

    driver = driver_action.DriverAction(base64.b64decode(DRIVER_ACTION))

    # determine cloning mode
    # use copy if the datastores differ, because snapshot mode would use the same storage pool
    cloning_image = Image(util.show_image(driver.image.cloning_ID))

    cloning_mode = CloneMode.from_str(driver.datastore.linstor_clone_mode) \
        if cloning_image.datastore_ID == driver.datastore.ID else CloneMode.COPY

    res = Resource(
        name="{}-{}".format(consts.IMAGE_PREFIX, driver.image.cloning_ID),
        uri=driver.datastore.linstor_controllers
    )
    res.placement.storage_pool = driver.datastore.storage_pool

    clone_name = "{}-{}".format(consts.IMAGE_PREFIX, IMAGE_ID)

    util.log_info("Cloning into new resource '{r}' with clone mode '{cm}' to pool '{p}'".format(
        r=clone_name, cm=CloneMode.to_str(cloning_mode), p=res.placement.storage_pool)
    )
    success = clone(
        res,
        clone_name,
        driver.datastore.deployment_nodes,
        driver.datastore.auto_place,
        driver.datastore.linstor_resource_group,
        cloning_mode
    )

    util.log_info("Exiting datastore clone with " + "success." if success else "error.")

    if success:
        print(clone_name)
    else:
        sys.exit(1)


if __name__ == "__main__":
    util.run_main(main)
