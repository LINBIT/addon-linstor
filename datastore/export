#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
OpenNebula Driver for Linstor
Copyright 2018 LINBIT USA LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""


from __future__ import print_function

import base64
import os
import sys
import traceback

from linstor import Resource, MultiLinstor
from one import driver_action, util

DRIVER_ACTION = sys.argv[1]
APP_ID = sys.argv[2]


def main():
    util.log_info("Entering datastore/export")

    driver = driver_action.DriverAction(base64.b64decode(DRIVER_ACTION))
    res = Resource(name=driver.image.source, uri=driver.datastore.linstor_controllers)
    hosts = res.diskful_nodes()

    with MultiLinstor(MultiLinstor.controller_uri_list(driver.datastore.linstor_controllers)) as lin:
        nodelist = lin.node_list_raise()
        dst_host = nodelist.node(hosts[0]).net_interfaces[0].address

    output_file = os.path.join(
        driver.datastore.staging_dirs, "{}-{}".format(res.name, APP_ID)
    )

    util.ssh_monitor_and_log(
        " ".join(
            [
                dst_host,
                " ".join(
                    [
                        "dd",
                        "if={}".format(res.volumes[0].device_path),
                        "of={}".format(output_file),
                        "bs=4M",
                    ]
                ),
                "could not dd image",
            ]
        )
    )

    img_format = util.ssh_monitor_and_log(
        " ".join(
            [
                dst_host,
                " ".join(
                    [
                        "qemu-img",
                        "info",
                        output_file,
                        "|",
                        "grep",
                        "file format",
                        "|",
                        "cut",
                        "-d",
                        "' '",
                        "-f3",
                    ]
                ),
                "could not export file format",
            ]
        )
    )

    if not driver.image.size:
        img_size = util.ssh_monitor_and_log(
            " ".join(
                [
                    dst_host,
                    " ".join(["du", "-LM", output_file, "|", "cut", "-f1"]),
                    "could not determine the size of the exported file",
                ]
            )
        )
    else:
        img_size = driver.image.size

    img_checksum = util.ssh_monitor_and_log(
        " ".join(
            [
                dst_host,
                " ".join(
                    [
                        "openssl",
                        "dgst",
                        "-md5",
                        output_file,
                        "|",
                        "cut",
                        "-d",
                        "' '",
                        "-f2",
                    ]
                ),
                "could not determine checksum",
            ]
        )
    )

    if not img_checksum:
        util.error_message("could not generate MD5SUM of the exported file")
        sys.exit(1)

    print(
        """<IMPORT_INFO>
    <IMPORT_SOURCE><![CDATA[{}]]></IMPORT_SOURCE>
    <MD5><![CDATA[{}]]></MD5>
    <SIZE><![CDATA[{}]]></SIZE>
    <FORMAT><![CDATA[{}]]></FORMAT>
    <DISPOSE><![CDATA[NO]]</DISPOSE>
    </IMPORT_INFO>""".format(
            "ssh://{}:{}".format(dst_host, output_file),
            img_checksum,
            img_size,
            img_format,
        )
    )

    util.log_info("Exiting datastore/export")


if __name__ == "__main__":
    try:
        main()
    except Exception as err:
        util.error_message(traceback.format_exc())
        print("ERROR: " + str(err))
        raise
