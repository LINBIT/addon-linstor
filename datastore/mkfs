#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
OpenNebula Driver for Linstor
Copyright 2018 LINBIT USA LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""


from __future__ import print_function

import base64
import random
import sys

from linstor import SizeCalc
from one.extender import deploy
from one import consts, driver_action, util
from one.extender import get_device_path

DRIVER_ACTION = sys.argv[1]
IMAGE_ID = sys.argv[2]


def main():
    util.log_info("Entering datastore mkfs.")

    driver = driver_action.DriverAction(base64.b64decode(DRIVER_ACTION))

    resource_name = "{}-{}".format(consts.IMAGE_PREFIX, IMAGE_ID)

    if driver.image.FS_type == "save_as":
        util.log_info("No need to create new image, exiting.")
        print(resource_name)
        sys.exit(0)

    util.set_up_datastore(
        " ".join(
            [
                driver.datastore.base_path,
                driver.datastore.restricted_dirs,
                driver.datastore.safe_dirs,
            ]
        )
    )

    util.log_info("Creation of a new resource: {}".format(resource_name))
    res = deploy(
        linstor_controllers=driver.datastore.linstor_controllers,
        resource_name=resource_name,
        storage_pool=driver.datastore.storage_pool,
        vlm_size_str=driver.image.size + "MiB",
        deployment_nodes=driver.datastore.deployment_nodes,
        auto_place_count=driver.datastore.auto_place,
        resource_group=driver.datastore.linstor_resource_group
    )

    res_host = random.choice(list(res.diskful_nodes()))

    if driver.image.FS_type and driver.image.FS_type != "raw":
        register_command = 'set -e ; export PATH=/usr/sbin:/sbin:$PATH ; $(mkfs_command "{0}" "{1}" "{2}")'.format(
            get_device_path(res),
            driver.image.FS_type,
            SizeCalc.convert(res.volumes[0].size, SizeCalc.UNIT_B, SizeCalc.UNIT_MiB))

        rc = util.ssh_exec_and_log(
            host=res_host,
            cmd=register_command,
            error_msg="Error registering {}, on {}".format(res, res_host))

        if int(rc) != 0:
            res.delete()
            sys.exit(1)

        util.log_info("Created filesystem {} on {} at {}".format(driver.image.FS_type, res, res_host))
    util.log_info("Exiting datastore mkfs.")

    print(res.name)


if __name__ == "__main__":
    util.run_main(main)
